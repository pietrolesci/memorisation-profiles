[build-system]
requires      = [ "poetry-core" ]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name        = "src"
version     = "0.1.0"
description = "memorisation"
authors     = [ "Pietro Lesci <pietrolesci@outlook.com>" ]
license     = "Apache-2.0"
readme      = "README.md"
packages    = [ { include = "src" } ]

[tool.poetry.dependencies]
python = ">=3.10,<3.11"
# torch                 = { url = "https://download.pytorch.org/whl/cu121/torch-2.1.0%2Bcu121-cp310-cp310-linux_x86_64.whl", platform = "linux", python = ">=3.10 <3.11" }
torch                 = "^2.2.0"
lightning             = "^2.1.0"
torchmetrics          = "^1.3.0.post0"
outlines              = { git = "https://github.com/normal-computing/outlines.git" }
einops                = "^0.7.0"
statsmodels           = "^0.14.0"
scikit-misc           = "^0.3.1"
sentence-transformers = "^2.2.2"
transformers          = "^4.37.0"
optimum               = "^1.16.2"
datasets              = "^2.16.1"
peft                  = "^0.6.0"
sentencepiece         = "^0.1.99"
srsly = "^2.4.8"

# hydra
omegaconf               = "^2.3.0"
hydra-core              = "^1.3.2"
hydra-colorlog          = "^1.2.0"
hydra-joblib-launcher   = "^1.2.0"
hydra-submitit-launcher = "^1.2.0"
colorlog                = "^6.8.0"

# plots
plotnine   = "^0.13.2"
matplotlib = "^3.8.2"
seaborn    = "^0.13.0"
altair     = "^5.2.0"

# analysis
differences    = "^0.2.0"
pandas         = "^2.2.0"
polars-u64-idx = "^0.20.1"
duckdb         = "^0.9.2"
openpyxl       = "^3.1.2"
ipykernel      = "^6.29.0"
ipywidgets     = "^8.1.1"

# dev
nvitop   = "^1.3.2"
ruff     = "^0.1.3"
torchfix = "^0.1.1"
huggingface-hub = {extras = ["cli"], version = "^0.20.3"}
rbo = "^0.1.3"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
".bzr",
".direnv",
".eggs",
".git",
".git-rewrite",
".hg",
".mypy_cache",
".nox",
".pants.d",
".pytype",
".ruff_cache",
".svn",
".tox",
".venv",
"__pypackages__",
"_build",
"buck-out",
"build",
"dist",
"node_modules",
"venv",
]

extend-include = [ "*.ipynb" ]

# Same as Black.
line-length = 120

# Assume Python 3.10
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10


[tool.ruff.format]
quote-style               = "double"
indent-style              = "space"
skip-magic-trailing-comma = true


[tool.ruff.isort]
combine-as-imports      = true
split-on-trailing-comma = false


[tool.ruff.lint]
select = [
# pycodestyle
"E",
# Pyflakes
"F",
# pyupgrade
"UP",
# flake8-bugbear
"B",
# flake8-simplify
"SIM",
# isort
"I",
]

ignore = [
# # Use `X | Y` for type annotations
# "UP007",
# # Logging statement uses f-string
# "G004",
# # Function definitions that include too many arguments (>5)
# "PLR0913",
# # Comparison to `True` should be `cond is True` or `if cond:`
# "E712",
# # blanket-type-ignore
# "PGH003",
# flake8 Indentation contains tabs (W191)
"W191",
]


# # Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# # select = ["E", "F"]
# select = [
# # pyflakes
# "F",
# # pycodestyle
# "E",
# "W",
# # flake8-2020
# "YTT",
# # flake8-bugbear
# "B",
# # flake8-quotes
# "Q",
# # flake8-debugger
# "T10",
# # flake8-gettext
# "INT",
# # pylint
# "PL",
# # misc lints
# "PIE",
# # flake8-pyi
# "PYI",
# # tidy imports
# "TID",
# # implicit string concatenation
# "ISC",
# # type-checking imports
# "TCH",
# # comprehensions
# "C4",
# # pygrep-hooks
# "PGH",
# # Ruff-specific rules
# "RUF",
# # flake8-bandit: exec-builtin
# "S102",
# # numpy-legacy-random
# "NPY002",
# # Perflint
# "PERF",
# # flynt
# "FLY",
# # flake8-logging-format
# "G",
# ]


# Allow autofix for all enabled rules (when `--fix`) is provided.
# fix = true
# fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
# unfixable = [  ]
